Program jest podzielony na 3 części(Pliki):
Część 1(HTML part of project) jest strukturą, na której bazują później funkcje oraz logika programu
Część 2(CSS part of project) odpowiada wyłącznie za wizualna stronę projektu.
Część 3(JavaScript part of project) odpowiada za funkcje, które wyświetlają wyniki oraz obliczają ścieżkę, którą powinniśmy obrać jak i samą logikę, aby aplikacja działała

Aby używać programu musimy rozdzielić owe części na osobne pliki:
Część 1: powinna mieć nazwę index.html
Część 2: powinna mieć nazwę style.css
Część 3: powinna mieć nazwę scr.js
Oraz powinny znajdować się w tym samym folderze

Działanie jak i opisanie programu zademonstruje na zajęciach


//1. HTML part of project
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="scr.js" defer></script>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="container">
        <h1>Problem Komiwojażera</h1>
        <form action="submit">
            <label for="point">Add points</label>
            <div class="inputs">
                <input id="pointOne" type="number">
                <input id="pointTwo" type="number">
            </div>
            <div class="buttons">
                <button type="submit" id="btn">Add value</button>
                <button type="submit" id="btnS">Search value</button>
            </div>
        </form>

        <div id="input-values"></div>

        <div id="output-section">
            <h2>Out put</h2>
        </div>

        <div id="path-to-take">
            <h2>Path to take</h2>
        </div>
    </div> 
</body>
</html>

//2. CSS part of project
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;700&display=swap');

*{
    padding: 0;
    margin: 0;
    box-sizing: border-box;
}

body{
    font-family: 'Poppins', sans-serif;
    color: rgb(53, 53, 53);
}

.container{
    display: flex;
    flex-direction: column;
    align-items: center;
}

h1{
    margin: 1em 0em;
}

/*======================*/
/*Form Section*/
form{
    background-color: rgb(250, 250, 250);
    border-radius: 10px;
    border: solid 3px rgb(212, 212, 212);
    box-shadow: 5px 5px 10px rgb(177, 177, 177);
    width: 70%;
    padding: 1em 0;
    display: flex;
    flex-direction: column;
    align-items: center;
}
form label{
    font-size: 1.3em;
    font-weight: 700;
}
form .inputs{
    margin: .5em 0;
}
form input{
    border: solid 2px rgb(53, 53, 53);
    border-radius: 5px;
    margin: .2em 0;
    width: 110px;
    font-size: 1.5rem;
}
form button{
    padding: .3em .6em;
    font-size: 1.2rem;
    border: none;
    background-color: rgb(67, 209, 126);
    border-radius: 5px;
}
form .buttons{
    margin: .5em 0;
}
/*======================*/
/*Output template*/
#input-values{
    margin: 1em 0em;
    background-color: rgb(250, 250, 250);
    border-radius: 10px;
    border: solid 3px rgb(212, 212, 212);
    box-shadow: 5px 5px 10px rgb(177, 177, 177);
    width: 70%;
    padding: 1em 1em;
    display: flex;
    flex-wrap: wrap;
}
#input-values h5{
    margin: .3em .5em;
    border: solid 3px rgb(212, 212, 212);
    border-radius: 10px;
    padding: .5em  1em;
    font-size: 1rem;
}
.first{
    color:  rgb(67, 209, 126);
}

/*======================*/
/*Output section*/
#output-section{
    margin: 1em 0em;
    background-color: rgb(250, 250, 250);
    border-radius: 10px;
    border: solid 3px rgb(212, 212, 212);
    box-shadow: 5px 5px 10px rgb(177, 177, 177);
    width: 80%;
    padding: 1em 0;
    display: flex;
    flex-direction: column;
    align-items: center;
}
h2{
    font-size: 1.3rem;
    font-weight: 700;
}

/*======================*/
/*Output template*/
.output{
    width: 90%;
    margin: 1em 0;
    padding: 1em 2em;
    border-top: solid 3px rgb(53, 53, 53);
}
.output h3{
    font-size: 1.1rem;
    margin-bottom: .5em;
}
.output h5{
    font-size: 1.2rem;
    font-weight: 500;
}
.won{
    font-size: 1.2rem;
    color: rgb(67, 209, 126);
}

#path-to-take{
    margin: 1em 0em;
    background-color: rgb(250, 250, 250);
    border-radius: 10px;
    border: solid 3px rgb(212, 212, 212);
    box-shadow: 5px 5px 10px rgb(177, 177, 177);
    width: 80%;
    padding: 1em 1.2em;
    display: flex;
    flex-direction: column;
    align-items: center;
}
#path-to-take h5{
    font-size: 1.1rem;
}

//JavaScript part of project - Tutaj zachodzą obliczenia i wyświetalnie wyniku
const btn = document.getElementById('btn')
const btnS = document.getElementById('btnS')
const outPut = document.getElementById('output-section')
const inPutValues = document.getElementById('input-values')
const pathToTake = document.getElementById('path-to-take')

outPut.style.visibility = 'hidden'
inPutValues.style.visibility = 'hidden'
pathToTake.style.visibility = 'hidden'


let array = [
    [5, 8, 0],
    [1, 1, 0],
    [7, 12, 0],
    [2, 9, 0],
    [7, 2, 0],
    [1, 12, 0],
    [4, 2, 0]
]
let patch = []
let temp = 0

btn.addEventListener('click', (e) =>{
    //Basic setup
    e.preventDefault()
    inPutValues.style.visibility = 'visible'

    //Adding to array
    const pointX = document.getElementById('pointOne').value
    const pointY = document.getElementById('pointTwo').value
    array.push([pointX, pointY])

    //adding to browser view
    let inputValues = document.querySelector('#input-values')
    let heading5 = document.createElement('h5')
    heading5.appendChild(document.createTextNode("["+ pointX +", "+ pointY +"]"))
    inputValues.appendChild(heading5)

    document.getElementById('pointOne').value = ''
    document.getElementById('pointTwo').value = ''
})

btnS.addEventListener('click', (e)=>{
    //Basic setup
    e.preventDefault()
    outPut.style.visibility = 'visible'

    //Setting up length of array so loop would not change
    //after deleting elements for it
    let arrayIter = array.length-1

    //Loop to go thro all iterations for array
    for(let i=0; i < arrayIter; i++){
    //Displaying sections for iterations
    drawSection(i)

    //Calculation and Displaying all calculations for current iteration
    calcPoint()
    //Setting new starting point for next iteration
    setNext()
    }

    //Displaying path that algorithm to take for points in array
    drawPath()
})

//Function to display iteration section
function drawSection(iter){
    const section = document.createElement('div')
    section.className = 'output'

    const iteration = document.createElement('h3')
    iter++
    iteration.appendChild(document.createTextNode('Iteration: '+ iter))

    section.appendChild(iteration)

    outPut.appendChild(section)
}

//Function to display all calculations for current iteration (Use in calcPoint)
function drawPointsCalc(pointNum, smallest){
    const sectionToAdd = document.getElementsByClassName('output')
    const pointHeading = document.createElement('h5')
    
    const sPoint = '['+ patch[patch.length-1][0] +', '+ patch[patch.length-1][1] +']'
    let costToGo = (array[pointNum][2]).toFixed(2)
    const nPoint = '['+ array[pointNum][0] +', '+ array[pointNum][1] +']'

    pointHeading.appendChild(document.createTextNode(sPoint +'->'+ nPoint +' = '+ costToGo))

    sectionToAdd[sectionToAdd.length-1].appendChild(pointHeading)
    costToGo = 0
}

//Function to display path that algorithm calculated to take based on points in array
function drawPath(){
    pathToTake.style.visibility = 'visible'

    const pathP = document.createElement('h5')

    let pathCombine = ''
    let finalCost = 0

    for(let i = 0; i < patch.length; i++){

        finalCost = finalCost + patch[i][2]

        let pathNum = '['+ patch[i][0] +', '+ patch[i][1] +'] ->' 
        pathCombine = pathCombine + pathNum
    }
    pathCombine = pathCombine + '['+ patch[0][0] +', '+ patch[0][1] +']'
    pathCombine = pathCombine +' = '+ finalCost.toFixed(2)
    pathP.appendChild(document.createTextNode(pathCombine))

    pathToTake.appendChild(pathP)

}

//Function to calculate points and chose smallest one
function calcPoint(){

    //Function to set first starting point
    setFirst()

    temp = 0

    for(let i=0; i < array.length; i++){
        let a = Math.pow((array[i][0]-patch[patch.length-1][0]), 2)
        let b = Math.pow((array[i][1]-patch[patch.length-1][1]), 2)
        let cost = (Math.sqrt(a+b))

        pointS = [patch[patch.length-1][0],patch[patch.length-1][1]]
        pointToGo = [array[i][0],array[i][1]]
        array[i][2] = cost
        
        if(temp == 0){
            temp = cost
        }else if(temp > cost){
            temp = cost
        }
    }

    //Displaying calculation
    for(let j=0; j < array.length; j++){
        drawPointsCalc(j, temp)
    }
}

//Function to set next starting point after calculating smallest one
function setNext(){

    let toDel = 0;

    for(let i=0; i < array.length; i++){
        if(array[i][2] == temp){
            patch.push(array[i])
            toDel = i
        }
    }
    array.splice(toDel, 1)
}

//Function to set first point
function setFirst(){
    if(patch.length == 0){
        patch[0] = array[0]
        array.splice(0, 1)
    }
}